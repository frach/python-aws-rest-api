---
test_name: Post items with wrong input data.
stages:
  - name: Try to create an item with "non_existing_key" next to "name".
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items"
      method: POST
      headers:
        Authorization: "Bearer {access_token}"
      json:
        name: Test Item Number One
        non_existing_key: some_value
    response:
      status_code: 400
      headers:
        content-type: application/json
      json:
        message: "Failed schema validation. Error: data must not contain {{'non_existing_key'}} properties, Path: ['data'],
          Data: {{'name': 'Test Item Number One', 'non_existing_key': 'some_value'}}"

  - name: Try to create an item with "non_existing_key" without "name".
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items"
      method: POST
      headers:
        Authorization: "Bearer {access_token}"
      json:
        non_existing_key: some_value
    response:
      status_code: 400
      headers:
        content-type: application/json
      json:
        message: "Failed schema validation. Error: data must contain ['name'] properties, Path: ['data'],
          Data: {{'non_existing_key': 'some_value'}}"

---
test_name: Post a couple of items and list all of them at once.
stages:
  - name: Make sure first item doesn't exist.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-two-first"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: [200, 404]

  - name: Make sure second item doesn't exist.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-two-second"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: [200, 404]

  - name: Post first item.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items"
      method: POST
      headers:
        Authorization: "Bearer {access_token}"
      json:
        name: Test Item Number Two First
    response:
      status_code: 200

  - name: Post second item.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items"
      method: POST
      headers:
        Authorization: "Bearer {access_token}"
      json:
        name: Test Item Number Two Second
    response:
      status_code: 200

  - name: Get list of both items.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      json:
        items:
          - id: test-item-number-two-first
            name: Test Item Number Two First
          - id: test-item-number-two-second
            name: Test Item Number Two Second

---
test_name: Post an item with the same name
stages:
  - name: Make sure item doesn't exist.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-three"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: [200, 404]

  - name: Create an item with optional parameter.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items"
      method: POST
      json:
        name: Test Item Number Three
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      headers:
        content-type: application/json
      json:
        item:
          id: test-item-number-three
          name: Test Item Number Three

  - name: Repeat the item creation request with the same name.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items"
      method: POST
      headers:
        Authorization: "Bearer {access_token}"
      json:
        name: Test Item Number Three
    response:
      status_code: 400
      headers:
        content-type: application/json
      json:
        message: The item already exists.

  - name: Remove the item.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-three"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      json:
        item:
          id: test-item-number-three
          name: Test Item Number Three

---
test_name: Create an item and modify it.
stages:
  - name: Make sure item doesn't exist.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-four"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: [200, 404]

  - name: Create an item with optional parameter.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items"
      method: POST
      headers:
        Authorization: "Bearer {access_token}"
      json:
        name: Test Item Number Four
        optional_attr: some-optonal-value
    response:
      status_code: 200

  - name: Modify optional attribute.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-four"
      method: PUT
      headers:
        Authorization: "Bearer {access_token}"
      json:
        optional_attr: some-modified-value
    response:
      status_code: 200
      json:
        item:
          id: test-item-number-four
          name: Test Item Number Four
          optional_attr: some-modified-value

  - name: Get the updated item.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-four"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      json:
        item:
          id: test-item-number-four
          name: Test Item Number Four
          optional_attr: some-modified-value

  - name: Remove the item.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-four"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

---
test_name: Modify non-existing item.
stages:
  - name: Ensure an item doesn't exist.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-five"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      json:
        message: Not found

  - name: Try to modify a non-existing item.
    request:
      url: "{tavern.env_vars.TEST_API_BASE_URL}/items/test-item-number-five"
      method: PUT
      headers:
        Authorization: "Bearer {access_token}"
      json:
        optional_attr: modified-attribute
    response:
      status_code: 404
      json:
        message: Not found
